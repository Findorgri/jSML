/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
package org.openmuc.jsml.test.structures;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;

import org.junit.Assert;
import org.junit.Test;
import org.openmuc.jsml.structures.SmlListEntry;
import org.openmuc.jsml.structures.SmlMessage;
import org.openmuc.jsml.structures.responses.SmlGetListRes;

public class DecodingHagerEdlTest {

    private static final byte[] MESSAGE_HAGER_EDL = hexStringToByteArray(
            "76090000000000042DD9620162007263010176010109000000000001649E0B0901484147003B9EF9980101636859007609000"
                    + "0000000042DDA620162007263070177010B0901484147003B9EF998070100620AFFFF72620164016FB4F1797707"
                    + "8181C78203FF01010101044841470177070100000009FF010101010B0901484147003B9EF998017707010001080"
                    + "0FF620001621E52FF5354AF0177070100010801FF0101621E52FF532D9F0177070100010802FF0101621E52FF53"
                    + "27100177070100020800FF620001621E52FF534E200177070100020801FF0101621E52FF5327100177070100020"
                    + "802FF0101621E52FF5327100177070100100700FF0101621B52005300000177070100240700FF0101621B52FF53"
                    + "000001770701001F0700FF0101622152FE5300010177070100200700FF0101622352FE535B9C017707010038070"
                    + "0FF0101621B52FF5300000177070100330700FF0101622152FE5300010177070100340700FF0101622352FE535B"
                    + "F901770701004C0700FF0101621B52FF5300000177070100470700FF0101622152FE5300010177070100480700F"
                    + "F0101622352FE535B250177070100603200020101620952FF5300EF0177078181C78205FF01010101830219B76F"
                    + "92A0A9357CED64AAD5D468E49DFF54CAC99748228F5EA13B458EF104B7CF49A9A6ECB9134F406C03C9C31ACF680"
                    + "1770701006032030301016223520062D601770701006032030401016223520062EF017707010060320003010162"
                    + "09520052100177070100603200040101620952005223017707010060320005010162095200521B010101639A5A0"
                    + "076090000000000042DDB62016200726302017101638ED1007605023F4FC762006200726301017601010500BFC5"
                    + "410B0649534B0104CEE5520E010163C08E007605023F4FC8620062007263070177010B0649534B0104CEE5520E0"
                    + "70100620AFFFF72620165010F66B17A77078181C78203FF010101010449534B0177070100000009FF010101010B"
                    + "0649534B0104CEE5520E0177070100010800FF65000101A201621E52FF590000000000F6F779017707010001080"
                    + "1FF0101621E52FF590000000000F6F7790177070100010802FF0101621E52FF5900000000000000000177070100"
                    + "020800FF65000101A201621E52FF5900000000012350F40177070100020801FF0101621E52FF590000000001235"
                    + "0F40177070100020802FF0101621E52FF5900000000000000000177070100100700FF0101621B520055FFFFFA99"
                    + "0177078181C78205FF010101018302E66A04A0C6D45090399F2D4A701B8B0C58D6F00B6F3152F705C509A80E326"
                    + "D2B34974100E47706C4EAA66365C4BA33FA01010163E45A007605023F4FC96200620072630201710163A5560076"
                    + "090000000000042DD9620162007263010176010109000000000001649E0B0901484147003B9EF99801016368590"
                    + "076090000000000042DDA620162007263070177010B0901484147003B9EF998070100620AFFFF72620164016FB4"
                    + "F17977078181C78203FF01010101044841470177070100000009FF010101010B0901484147003B9EF9980177070"
                    + "100010800FF620001621E52FF5354AF0177070100010801FF0101621E52FF532D9F0177070100010802FF010162"
                    + "1E52FF5327100177070100020800FF620001621E52FF534E200177070100020801FF0101621E52FF53271001770"
                    + "70100020802FF0101621E52FF5327100177070100100700FF0101621B52005300000177070100240700FF010162"
                    + "1B52FF53000001770701001F0700FF0101622152FE5300010177070100200700FF0101622352FE535B9C0177070"
                    + "100380700FF0101621B52FF5300000177070100330700FF0101622152FE5300010177070100340700FF01016223"
                    + "52FE535BF901770701004C0700FF0101621B52FF5300000177070100470700FF0101622152FE530001017707010"
                    + "0480700FF0101622352FE535B250177070100603200020101620952FF5300EF0177078181C78205FF0101010183"
                    + "0219B76F92A0A9357CED64AAD5D468E49DFF54CAC99748228F5EA13B458EF104B7CF49A9A6ECB9134F406C03C9C"
                    + "31ACF6801770701006032030301016223520062D601770701006032030401016223520062EF0177070100603200"
                    + "0301016209520052100177070100603200040101620952005223017707010060320005010162095200521B01010"
                    + "1639A5A0076090000000000042DDB62016200726302017101638ED1007605023F4FC76200620072630101760101"
                    + "0500BFC5410B0649534B0104CEE5520E010163C08E007605023F4FC8620062007263070177010B0649534B0104C"
                    + "EE5520E070100620AFFFF72620165010F66B17A77078181C78203FF010101010449534B0177070100000009FF01"
                    + "0101010B0649534B0104CEE5520E0177070100010800FF65000101A201621E52FF590000000000F6F7790177070"
                    + "100010801FF0101621E52FF590000000000F6F7790177070100010802FF0101621E52FF59000000000000000001"
                    + "77070100020800FF65000101A201621E52FF5900000000012350F40177070100020801FF0101621E52FF5900000"
                    + "000012350F40177070100020802FF0101621E52FF5900000000000000000177070100100700FF0101621B520055"
                    + "FFFFFA990177078181C78205FF010101018302E66A04A0C6D45090399F2D4A701B8B0C58D6F00B6F3152F705C50"
                    + "9A80E326D2B34974100E47706C4EAA66365C4BA33FA01010163E45A007605023F4FC96200620072630201710163"
                    + "A55600");

    private static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
        }
        return data;
    }

    @Test
    public void decodeTimeTagMessage() throws IOException {

        DataInputStream is = new DataInputStream(new ByteArrayInputStream(MESSAGE_HAGER_EDL));

        SmlMessage smlMessage = new SmlMessage();
        Assert.assertTrue(smlMessage.decodeAndCheck(is));

        smlMessage = new SmlMessage();
        Assert.assertTrue(smlMessage.decodeAndCheck(is));

        SmlGetListRes getListRes = (SmlGetListRes) smlMessage.getMessageBody().getChoice();
        for (SmlListEntry listEntry : getListRes.getValList().getValListEntry()) {
            if (listEntry.getValTime().isSelected()) {
                if (listEntry.getValTime().getTag().getVal() == 3) {
                    // System.out.println("timestamp: "
                    // + ((SML_TimestampLocal)
                    // (listEntry.getValTime().getChoice())).getTimestamp().getVal());
                }
            }
        }

        SmlMessage smlMessage3 = new SmlMessage();
        Assert.assertTrue(smlMessage3.decodeAndCheck(is));
        // System.out.println(Integer.toHexString(smlMessage3.getMessageBody().getTag().getVal()));

    }

}
